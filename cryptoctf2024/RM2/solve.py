from pwn import remote
from sage.all import prod, crt
from Crypto.Util.number import getPrime, isPrime
from create_smooth_primes import get_smooth_prime
import re


def get_p(nbit):
    while True:
        a = getPrime(nbit - 1)
        if isPrime(2 * a + 1) and isPrime(4 * a + 3):
            print(a)
            return a

def get_govno(nbit):
    while True:
        a = getPrime(nbit - 1)
        if isPrime(2 * a + 1):
            return 2 * a + 1

p = 170801077092492573570517165775571413020233676815110846780878960995242044774306196509406867772218349594256991186221524252252034531354007762422579141391522827293823345712605467604574196054406553151149952205702771434645023424007219353919908173942460143313464197512599463263363481967283220682398987271795532844839
p1 = [int(x) for x in ["2","9473","60527","51001","48533","33937","58391","36563","36563","51713","10837","36571","44917","55603","32917","32917","61409","54833","49463","52163","37813","33581","62189","54907","49783","47459","36187","60427","55667","36307","36299","37397","34301","53717","52249","34877","60869","63277","55127","52769","44729","62987","64091","55661","58549","57389","56923","52147","50131","54361","34613","51949","61627","56597","52489","53731","41659","52883","60631","52919","62297","42901","52253","48079","41453","63281","33893"]]
p2 = [163, 21929, 27754595086177, 3443334968360926541015084155971133299714495127884970323545733732988982215020175940426581412825373049245001549018432084217463812957329615044141979466138383056916564401987041931237195474228725253739636032562152538479975208865330318310636230572890913721443916781262765066384161876844322187901] 

assert isPrime(p)
assert prod(p1) == p - 1
assert prod(p2) == 2 * p  +1
assert p.bit_length() == 1024


q = 110167340227476484562958206301061045302168984062025687888662354602576815388130980953204083817071660335436643258121282142356984569337962966652991576402035381786414013180243882336471954512219312126981465823016249822177501762005739240896831845679073432261837987003910833081466975371615145936514966108026966555343
q1 = [2, 8387, 10567, 32779, 33703, 35111, 35617, 35899, 37171, 37589, 37783, 38237, 38299, 38393, 38959, 39119, 39181, 39749, 41039, 41257, 41491, 42073, 42193, 42337, 43151, 43793, 44101, 44119, 44507, 45197, 46181, 46273, 47269, 47497, 47681, 49531, 50051, 50587, 51283, 51287, 51517, 52747, 53087, 53401, 53597, 54469, 55313, 55697, 55763, 56701, 56767, 56783, 56989, 57793, 59581, 60617, 61981, 62791, 63533, 63589, 63671, 63691, 63839, 64783, 64793, 64817, 64901]
q2 = [67, 2106394188443, 1561235469726595794510192733675595089645365924831500465163794211675776015762883947944082812245540374346110322896671983652344313487932610633555776607915152588737217683433099453787078092068675729644667806051432890700663466962673637498793187760534724038374337973153155404942878076945424339519873327]

assert isPrime(q)
assert prod(q1) == q - 1
assert prod(q2) == 2 * q  +1
assert q.bit_length() == 1024

f1 = q1 + p1
f2 = q2 + p2
assert len(f2) == len(set(f2))
f1 = sorted([(x, f1.count(x)) for x in set(f1)], key=lambda x: x[0])


host, port = "01.cr.yp.toc.tf", 13371
r = remote(host, port)
r.recvline()
r.recvline()
r.recvline()
r.recvline()


r.sendline(f"{p},{q}".encode())
c1 = int(re.findall(r'c1 = (.*)\n', r.recvline().decode())[0])
c2 = int(re.findall(r'c2 = (.*)\n', r.recvline().decode())[0])
e = 0x10001

mods = []
rems = []
for p1, e1 in f1:
    mods.append(p1**e1)
    d1 = pow(e, -1, p1**(e1 - 1) * (p1 - 1))
    m1 = pow(c1, d1, p1**e1)

    assert pow(m1, e, p1**e1) == c1 % p1**e1
    rems.append(m1)

m = int(crt(rems, mods))
assert pow(m, e, (p - 1) * (q - 1)) == c1
m_1 = m.to_bytes(32, 'big').decode()


rems = []
for p1 in f2:
    d1 = pow(e, -1, p1 - 1)
    m1 = pow(c2, d1, p1)

    assert pow(m1, e, p1) == c2 % p1
    rems.append(m1)

m = int(crt(rems, f2))
assert pow(m, e, (2 * p + 1) * (2 * q + 1)) == c2
m_2 = m.to_bytes(32, 'big').decode()

ans = m_1 + m_2
r.sendline(ans.encode())
r.interactive()
