

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_31 = Integer(31); _sage_const_1 = Integer(1); _sage_const_55 = Integer(55); _sage_const_0 = Integer(0)#!/home/sage/sage/src/bin/sage
from os import environ
from sage.all import *

p = (_sage_const_2  ** _sage_const_31 ) - _sage_const_1 
F = GF(p)
FLAG_N = _sage_const_55 
try:
    FLAG_STR = open('/flag').read().strip()
except:  # noqa
    FLAG_STR = 'A' * FLAG_N
assert len(FLAG_STR) == FLAG_N

FLAG = matrix(F, FLAG_N, _sage_const_1 , [ord(x) for x in FLAG_STR])


def random_invertible_matrix(n):
    while True:
        res = matrix(F, n, n, [F.random_element() for _ in range(n * n)])
        if res.is_invertible():
            return res


def serialize_mtx(mtx):
    rows = []
    for row in mtx.rows():
        rows.append(','.join(str(elem) for elem in row))
    return '[' + ';'.join(rows) + ']'


def deserialize_mtx(mtx):
    rows = mtx.strip('[]\n').split(';')
    rows = [[int(num) for num in row.split(',')] for row in rows]
    return Matrix(F, rows)

mtx = identity_matrix(FLAG_N)

A = random_invertible_matrix(FLAG_N)


def submit_b(B):
    if not B.is_invertible():
        return 'non invertible'

    n = B.nrows()
    if n != FLAG_N:
        return 'rows'

    diagonal_element = B[_sage_const_0 , _sage_const_0 ]

    identity_multiple = Matrix(F, identity_matrix(n))
    for i in range(n):
        for j in range(n):
            identity_multiple[i, j] = diagonal_element

    if B == identity_multiple:
        return 'identity_multiple'

    return B * A * (B ** -_sage_const_1 ) * (A ** -_sage_const_1 ) * FLAG


print('aight, lets see what you got')
while True:
    try:
        matrix = deserialize_mtx(input())
        res = submit_b(matrix)
        if isinstance(res, str):
            print('https://youtu.be/G7b4VMEATNo?t=18')
            break
    except Exception as E:
        print(E)
        print('https://youtu.be/G7b4VMEATNo?t=19')
        break

    print(serialize_mtx(res))

